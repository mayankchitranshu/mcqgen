Create and Modify Administered Objects in EMS
You can create administered objects for storage in EMS using either the administration tool
or the administration APIs, or directly in the configuration files. This section describes how
to create administered objects using the administration tool.
To create a connection factory, use the create factory command in the EMS
Administration Tool. For example, to create a generic connection factory, named
myFactory, that establishes a TCP connection to port 7344 on server1, start the EMS
Administration Tool and enter:
   create factory myFactory generic URL=tcp://server1:7344
The connection factory data stored on the EMS server is located in the factories.conf file.
You can use the show factories command to list all of the connection factories on your
EMS server and the show factory command to show the configuration details of a specific
connection factory.
A connection factory may include optional properties for balancing server load and
establishing thresholds for attempted connections, as described in Connection Factory
Parameters. These properties can be specified when creating the factory or modified for an
existing factory using the addprop factory, setprop factory, and removeprop factory
commands.
For example, to set the maximum number of connection attempts for the connection
factory, myFactory, from the default value of 2 to 5, start the EMS Administration Tool and
enter:
TIBCO Enterprise Message Service™ User Guide
451 | The EMS Implementation of JNDI
   addprop factory myFactory connect_attempt_count=5
And to reset the value back to 2, enter:
   setprop factory myFactory connect_attempt_count=2
Create Connection Factories for Secure Connections
This topic describes how to create a static connection factory for establishing a TLS
connection.
Similar TLS parameters must be used when looking up the connection factory, as described
in Perform Secure Lookups.
Connections that are to be secured using TLS identify the transport protocol as ’ssl’ and
may include any number of the TLS configuration parameters listed in TLS Server
Parameters.
For example, to create a generic connection factory, named mySecureFactory, that
establishes a TLS connection to port 7243 on server1, start the EMS Administration Tool
and enter:
create factory mySecureFactory generic URL=ssl://server1:7243
To create a factory to set up a generic connection and check the server's certificate to
confirm the name of the server is myServer, enter (all one line):
create factory MySSLFactory generic url=ssl://7243
ssl_verify_host=enabled ssl_expected_hostname=myServer ssl_trusted=
certs/server_root.cert.pem
To create a factory to set up a topic connection, check the server's certificate (but not the
name inside the certificate), and to set the ssl_auth_only parameter so that TLS is only
used by the client when creating the connection, enter (all one line):
create factory AnotherSSLFactory topic url=ssl://7243
ssl_verify_host=enabled ssl_verify_hostname=disabled ssl_trusted=
certs/server_root.cert.pem ssl_auth_only=enabled
TIBCO Enterprise Message Service™ User Guide
452 | The EMS Implementation of JNDI
Note: These samples assume that the certificate server_root.cert.pem is
located in "certs" subdirectory of the directory where the server is running.
See TLS Protocol for details.
Create Connection Factories for Fault-Tolerant
Connections
When connecting a fault-tolerant client to EMS, you must specify two or more EMS servers
in your connection factory. When creating a connection factory for a fault-tolerant client,
specify multiple server URLs in the url argument of the create factory command.
For example, to create a generic connection factory, named myFtFactory, that establishes
TCP connections to port 7545 on the primary server, server0, and port 7344 on the
secondary server, server1, start the EMS Administration Tool and enter (on one line):
create factory myFtFactory generic url=tcp://server0:7545,tcp://server1:7344
 Should server0 become unavailable, the client will connect to server1. See Fault Tolerance
for details.
Look up Administered Objects Stored in EMS
You can lookup objects from an EMS server by name. All clients can lookup objects in the
EMS naming service. Alternatively, Java applications can lookup objects in a third-party
JNDI server, and C# clients can lookup objects in a third-party LDAP server.
To lookup administered objects stored in EMS, you need to create the initial context that
identifies the URL of the naming service provider and any other properties, such as the
username and password to authenticate the client to the service. The naming service
provider URL has form:
    tibjmsnaming://host:port
The following examples demonstrate how to access Jakarta Messaging administered
objects when using TIBCO Enterprise Message Service. Each of these examples assume that
TIBCO Enterprise Message Service™ User Guide
453 | The EMS Implementation of JNDI
a connection factory, named ConFac, exists in the factories.conf file, a topic.sample
topic exists in topics.conf, and a queue.sample queue exists in queues.conf.
l Java
Create an InitialContext object for the initial context, which consists of the
provider context factory and JNDI provider URL, as well as the username and
password to authenticate the client to the EMS server:
Hashtable env = new Hashtable();
  env.put(Context.INITIAL_CONTEXT_FACTORY,
        "com.tibco.tibjms.naming.TibjmsInitialContextFactory");
  env.put(Context.PROVIDER_URL,"tibjmsnaming://localhost:7222");
  env.put(Context.SECURITY_PRINCIPAL, "userName");
  env.put(Context.SECURITY_CREDENTIALS, "password");
InitialContext jndiContext = new InitialContext(env);
Look up a connection factory, named ConFac, and destinations, named topic.sample
and queue.sample, from the initial context:
ConnectionFactory factory =
      (javax.jms.ConnectionFactory)
      jndiContext.lookup("ConFac");
javax.jms.Topic sampleTopic =
          (javax.jms.Topic)jndiContext.lookup("topic.sample");
javax.jms.Queue sampleQueue =
          (javax.jms.Queue)jndiContext.lookup("queue.sample");
See the tibjmsJNDI.java sample client located in the EMS_HOME/samples/java/JNDI
directory.
l C
Create a tibemsLookupContext object for the initial context, which consists of the
JNDI provider URL and the username and password to authenticate the client to the
EMS server:
tibemsLookupContext* contextstatus = NULL;
status = tibemsLookupContext_Create(
                           &context,
                           "tcp://localhost:7222",
                           "userName",
                           "password");
Use the tibemsLookupContext_LookupConnectionFactory function to look up a
connection factory, named ConFac, and use the tibemsLookupContext_
TIBCO Enterprise Message Service™ User Guide
454 | The EMS Implementation of JNDI
LookupDestination function to look up the destinations, named and queue.sample,
from the initial context:
topic.sample
tibemsConnectionFactory factory = NULL;
tibemsDestination sampleTopic = NULL;
tibemsDestination sampleQueue = NULL;
status = tibemsLookupContext_Lookup(context,
                                    "ConFac",
                                    (void**)&factory);
status = tibemsLookupContext_Lookup(context,
                                    "sample.queue",
                                    (void**)&sampleQueue);
status = tibemsLookupContext_Lookup(context,
                                    "topic.sample,
                                    (void**)&sampleTopic);
l C#
Create a ILookupContext object for the initial context, which consists of the JNDI
provider URL and the username and password to authenticate the client to the EMS
server.